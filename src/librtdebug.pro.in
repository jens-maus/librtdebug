#/* vim:set ts=2 nowrap: ****************************************************
#
# librtdebug - A C++ based thread-safe Runtime Debugging Library
# Copyright (C) 2003-2006 by Jens Langner <Jens.Langner@light-speed.de>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# $Id$
#
#***************************************************************************/

# main variables
TEMPLATE  = lib
CONFIG	 *= warn_on create_prl @ANSI_COLOR@ @QTLINK_LEVEL@
QT				=
TARGET    = rtdebug
VERSION   = @PACKAGE_VERSION@
DESTDIR   = ../lib/

# directory specification
unix {
  OBJECTS_DIR = .obj
  MOC_DIR     = .moc
  UI_DIR      = .ui
}
win32 {
  OBJECTS_DIR = _obj
  MOC_DIR     = _moc
  UI_DIR      = _ui
}

# define headers and source files for compilation
# PUB_HEADER: public headers going into /usr/local/include/rtdebug
# HEADERS...: all headers including private ones
# SOURCES...: all source files required for the compilation

PUB_HEADER =	CRTDebug.h \
							includes/rtdebug.h

HEADERS  = $$PUB_HEADER

SOURCES  = CRTDebug.cpp

DEPENDPATH   = 
INCLUDEPATH  = . includes

# find out the system
HOST_OS=@HOST_OS@
HOST_CPU=@HOST_CPU@
HOST_MACHINE=@HOST_MACHINE@

# UNIX based target platforms installation defines
unix {
  # on unix we use configure to define everything like install path
	PREFIX=@prefix@
  LIB_DIR=@prefix@/lib
  INCLUDE_DIR=@prefix@/include
  DATA_DIR=@prefix@/share
	
  # -p option should be -P, so that "make install" as root creates files owned by root
  # and links are preserved.
  QMAKE_COPY_FILE = $(COPY) -P
	
  # install header 
  include.path  = $$INCLUDE_DIR/rtdebug
  include.files = $$PUB_HEADER

  # install documentation html
  documentation.path = $$DATA_DIR/rtdebug/doc
  documentation.files = ../doc/*.html ../doc/*.css

  # install library
  target.path = $$LIB_DIR

  # "make install" configuration options
  INSTALLS += target include documentation
}

# mac specific options to build universal
# binaries 
mac {      
  CONFIG += x86 ppc x86_64
}          

# set the config to either release or debug
COMPILE_LEVEL = @COMPILE_LEVEL@
contains(COMPILE_LEVEL, debug) {
  CONFIG -= release
  CONFIG *= debug
  DEBUG = -DDEBUG
}
else {
  CONFIG -= debug
  CONFIG *= release
  DEBUG =
  QMAKE_LINK *= -s 
}

QMAKE_EXTRA_VARIABLES = DEBUG
QMAKE_CXXFLAGS *= $(EXPORT_DEBUG)
QMAKE_CFLAGS *= $(EXPORT_DEBUG)

# the librtdebug library itself doesn't require Qt so we remove the QT
# libs from our linker dependency
QMAKE_LIBS_QT =
QMAKE_LIBS_QT_THREAD =

# set the general compiler optimizations
QMAKE_CFLAGS_RELEASE = -O3 -fomit-frame-pointer -funroll-loops
QMAKE_CXXFLAGS_RELEASE = -O3 -fomit-frame-pointer -funroll-loops

# set defines so that we can identify the processor type later on
!mac {
  contains(HOST_MACHINE, x86_64) {      
    DEFINES *= __X86_64__
  }
  contains(HOST_MACHINE, i[63]86) {
    DEFINES *= __i386__
  }
  contains(HOST_MACHINE, sun4u) {
    DEFINES *= __SPARC__
  }
  contains(HOST_MACHINE, Power.+) {
    DEFINES *= __POWERPC__
  }
}

!mac {
  contains(HOST_MACHINE, x86_64) {      
    QMAKE_CFLAGS_RELEASE *= -mtune=native
    QMAKE_CXXFLAGS_RELEASE *= -mtune=native
  }
  contains(HOST_MACHINE, i[63]86) {
    QMAKE_CFLAGS_RELEASE *= -mtune=native
    QMAKE_CXXFLAGS_RELEASE *= -mtune=native
  }
  contains(HOST_MACHINE, sun4u) {
    QMAKE_CFLAGS_RELEASE *= -mcpu=ultrasparc3
    QMAKE_CXXFLAGS_RELEASE *= -mcpu=ultrasparc3
  }
  contains(HOST_MACHINE, Power.+) {
    QMAKE_CFLAGS_RELEASE *= -mcpu=powerpc
    QMAKE_CXXFLAGS_RELEASE *= -mcpu=powerpc
  }
}

# override the compile output
!win32 {
  QMAKE_CXX  = @echo \'  CC   $<\'; $$QMAKE_CXX
  QMAKE_LINK = @echo \'  LD   $@\'; $$QMAKE_LINK
  QMAKE_MOC  = @echo \'  MOC  $@\'; $$QMAKE_MOC
}

# use ANSI colors if it was specified on configure time
ansi_color {
  DEFINES *= ANSI_COLOR
}
else {
  DEFINES -= ANSI_COLOR
}
